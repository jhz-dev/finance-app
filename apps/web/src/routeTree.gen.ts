/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProfilePageRouteImport } from './routes/ProfilePage'
import { Route as GoalsIndexRouteImport } from './routes/goals/index'
import { Route as GoalsDetailRouteImport } from './routes/goals/detail'
import { Route as BudgetsDetailRouteImport } from './routes/budgets/detail'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfilePageRoute = ProfilePageRouteImport.update({
  id: '/ProfilePage',
  path: '/ProfilePage',
  getParentRoute: () => rootRouteImport,
} as any)
const GoalsIndexRoute = GoalsIndexRouteImport.update({
  id: '/goals/',
  path: '/goals/',
  getParentRoute: () => rootRouteImport,
} as any)
const GoalsDetailRoute = GoalsDetailRouteImport.update({
  id: '/goals/detail',
  path: '/goals/detail',
  getParentRoute: () => rootRouteImport,
} as any)
const BudgetsDetailRoute = BudgetsDetailRouteImport.update({
  id: '/budgets/detail',
  path: '/budgets/detail',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/ProfilePage': typeof ProfilePageRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/budgets/detail': typeof BudgetsDetailRoute
  '/goals/detail': typeof GoalsDetailRoute
  '/goals': typeof GoalsIndexRoute
}
export interface FileRoutesByTo {
  '/ProfilePage': typeof ProfilePageRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/budgets/detail': typeof BudgetsDetailRoute
  '/goals/detail': typeof GoalsDetailRoute
  '/goals': typeof GoalsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/ProfilePage': typeof ProfilePageRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/budgets/detail': typeof BudgetsDetailRoute
  '/goals/detail': typeof GoalsDetailRoute
  '/goals/': typeof GoalsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/ProfilePage'
    | '/login'
    | '/register'
    | '/budgets/detail'
    | '/goals/detail'
    | '/goals'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/ProfilePage'
    | '/login'
    | '/register'
    | '/budgets/detail'
    | '/goals/detail'
    | '/goals'
  id:
    | '__root__'
    | '/ProfilePage'
    | '/login'
    | '/register'
    | '/budgets/detail'
    | '/goals/detail'
    | '/goals/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProfilePageRoute: typeof ProfilePageRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  BudgetsDetailRoute: typeof BudgetsDetailRoute
  GoalsDetailRoute: typeof GoalsDetailRoute
  GoalsIndexRoute: typeof GoalsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ProfilePage': {
      id: '/ProfilePage'
      path: '/ProfilePage'
      fullPath: '/ProfilePage'
      preLoaderRoute: typeof ProfilePageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/goals/': {
      id: '/goals/'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/goals/detail': {
      id: '/goals/detail'
      path: '/goals/detail'
      fullPath: '/goals/detail'
      preLoaderRoute: typeof GoalsDetailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/budgets/detail': {
      id: '/budgets/detail'
      path: '/budgets/detail'
      fullPath: '/budgets/detail'
      preLoaderRoute: typeof BudgetsDetailRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  ProfilePageRoute: ProfilePageRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  BudgetsDetailRoute: BudgetsDetailRoute,
  GoalsDetailRoute: GoalsDetailRoute,
  GoalsIndexRoute: GoalsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
